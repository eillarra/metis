# Generated by Django 4.2.4 on 2023-08-25 9:21

from django.db import migrations

from metis.utils.fixtures.forms.students import get_audiologo_student_form


def tmp_data_to_form_response(tmp_data) -> dict:
    statuut = [
        "bijzonder_statuut" if tmp_data.has_special_status else None,
        "werkstudent" if tmp_data.is_werkstudent else None,
        "beursstudent" if tmp_data.is_beursstudent else None,
    ]

    stage = [
        "nl_wallonie" if tmp_data.is_interested_in_foreign else None,
        "auto" if tmp_data.has_car else None,
        "frans" if tmp_data.can_speak_french else None,
    ]

    return {
        "rijksregisternummer": tmp_data.rijksregisternummer,
        "gsm_nummer": tmp_data.mobile_phone,
        "adres": tmp_data.address,
        "stad": tmp_data.city,
        "adres2": tmp_data.address2,
        "stad2": tmp_data.city2,
        "kot_gent": "ja" if tmp_data.has_kot else "nee",
        "statuut": [s for s in statuut if s is not None],
        "stage": [s for s in stage if s is not None],
        "stage__frans": tmp_data.can_speak_details if tmp_data.can_speak_french else "",
        "opmerkingen": tmp_data.comments,
    }


def migrate_tmp_data(apps, schema_editor):
    """
    Create a new Questioning for student data on 2023-34 projects for "audio" and "logo".
    """

    Project = apps.get_model("metis", "Project")
    Questioning = apps.get_model("metis", "Questioning")
    FormResponse = apps.get_model("metis", "FormResponse")
    TmpData = apps.get_model("metis", "TmpData")
    Student = apps.get_model("metis", "Student")
    ContentType = apps.get_model("contenttypes", "ContentType")

    response_map = {}

    for education_code in ["audio", "logo"]:
        try:
            project = Project.objects.get(name="AJ23-24", education__code=education_code)
        except Project.DoesNotExist:
            continue

        period_id = 10 if education_code == "audio" else 20
        questioning = Questioning.objects.create(
            project_id=project.id,
            period_id=period_id,
            type="student_information",
            form_definition=get_audiologo_student_form(),
            created_by_id=1,
            updated_by_id=1,
            start_at="2023-05-28 10:00:00.000000+02:00",  # local time 28 May 2023 10:00
            end_at="2023-07-02 23:59:59.000000+02:00",  # local time 3 July 2023 23:59
        )

        for tmp_data in TmpData.objects.all():
            try:
                student = Student.objects.get(project=project, user=tmp_data.user)
            except Student.DoesNotExist:
                continue

            res = FormResponse.objects.create(
                content_type=ContentType.objects.get_for_model(Student),
                object_id=student.id,
                questioning=questioning,
                data=tmp_data_to_form_response(tmp_data),
                created_by_id=tmp_data.created_by_id,
                updated_by_id=tmp_data.updated_by_id,
                created_at=tmp_data.created_at,
                updated_at=tmp_data.updated_at,
            )

            response_map[res.id] = tmp_data.id

    # dates are set automatically, so we update them to match the tmp_data

    form_responses = []

    for form_response in FormResponse.objects.filter(questioning__type="student_information"):
        tmp_data_id = response_map.get(form_response.id)
        if tmp_data_id is None:
            continue

        tmp_data = TmpData.objects.get(id=tmp_data_id)
        form_response.created_at = tmp_data.created_at
        form_response.updated_at = tmp_data.updated_at
        form_responses.append(form_response)

    FormResponse.objects.bulk_update(form_responses, ["created_at", "updated_at"])


class Migration(migrations.Migration):
    dependencies = [
        ("metis", "0018_questionings"),
    ]

    operations = [
        # ------
        migrations.RunPython(migrate_tmp_data),
        # ------
        migrations.DeleteModel(
            name="TmpData",
        ),
    ]
